{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red40\green41\blue49;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c20828\c21616\c25119;\cssrgb\c100000\c100000\c100000\c0;}
\margl1440\margr1440\vieww21500\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 bits:\
\
& , |, ~, >>, << \
mask l\'92s  to keep, O\'92s to reset\
\
a b c d e f\
\
\
\
pipes:\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\slleading20\pardirnatural\partightenfactor0
\cf0 int p[2], r, s;  // r for result\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 pipe(p);	// worry how to put things in and outside pipe, need array to store values\
r = fork();\
if (r == 0)\
 \{					//only new process should be running\
   close(p[0]);\
   close(1);\
   dup(p[1]);			// reopening writing (output) end of pipe, dup reopen file\
   execlp(\'93 ls \'93, \'93 ls\'94, \'93 -l \'93, NULL);			//first thing is file executed, execlp kills program and replaces it with ls file\
   error( if execlp fails)\
   exit(1); \}\
\
r = fork();\
if (r == 0)\
\{\
   close(p[1]);\
   close(0);\
   dup(p[0]);\
   execlp (\'93more, \'93more\'94, NULL)\
   error( if execlp fails)\
   exit(1); \}\
\
r = wait(&s);\
if( WIFEXITED(s) && WEXITS(s) != 0)\
   error\'85\
r = wait(&s);\
close(p[0]);\
close(p[1]);\
\
\
if we were redirecting to a file we only need one process so more is not needed\
\
ls -l > x.txt\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\slleading20\pardirnatural\partightenfactor0
\cf0 int p[2], r, s;  // r for result\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 pipe(p);	// worry how to put things in and outside pipe, need array to store values\
r = fork();\
if (r == 0)\
 \{					//only new process should be running\
  \
   close(1);\
   open( \'93x.txt \'93, O_WRONLY)\'85);		// reopening writing (output) end of pipe, dup reopen file\
   execlp(\'93 ls \'93, \'93 ls\'94, \'93 -l \'93, NULL);			//first thing is file executed, execlp kills program and replaces it with ls file\
   error( if execlp fails)\
   exit(1); \}\
\
\
DIRECTORIES\
\
must open directory to read it, read names one by one, then close it\
\
DIR * d - opendir( \'93 . \'93;\
NULL => error\
while (1)\
\{ 			//only get file names one at a time\
   struct direct *e = readdir(d);\
   if ( e == NULL) break;\
   printf( \'93% s\\n \'93, e -> de_name) // read files\
 or\
   if ( e-> de_type == DT_DIR)\
 or\
   etc\
\}\
\
closedir(d);\
\
STAT gives info about each file\
\
struct stat s;\
stat ( e->de_name, &s)\
then\
s.st_size = file size\
s.st_uid = owner\
//should know rest of them\
\
CREATING DIRECTORY\
\
mkdir( \'93subdir\'94)\
\
 string to string\
\
\pard\pardeftab720\partightenfactor0

\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
#include <stdio.h> \
#include <string.h> \
int main() \{ char str[100], converted[100]; \
int i, j; \
printf("Enter a string: "); \
scanf("%s", str);\
 j = 0; \
\
for (i = 0; i < strlen(str); i++) \
\{ if (str[i] >= 'A' && str[i] <= 'Z') \
	\{ converted[j] = str[i] + 32; j++; \} \
else if (str[i] >= 'a' && str[i] <= 'z') \
	\{ converted[j] = str[i] - 32; j++; \}\
 \} converted[j] = '\\0'; \
printf("Converted string: %s\\n", converted); \
return 0; \}\
\
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \kerning1\expnd0\expndtw0 \
}